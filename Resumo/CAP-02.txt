Capítulo 02 - Controle de fluxo e o paradigma procedural
Nesse capítulo aprendemos:

⦁	Nas assinaturas dos métodos os parâmetros devem estar tipados explicitamente! Exemplo:

fun calculaImposto(produto: Produto) 


⦁	No kotlin a condicional if é igual ao Java, ficando assim:

if(saldo > 0.0){ 
	println("Saldo é positivo") 
}else if(saldo == 0.0){ 
	println("Saldo é neutro") 
}else{ 
	println("Saldo é negativo") 
}

⦁	So que quando fazemos desse jeito a IDE sublinha o if, isso significa que tem um jeito melhor de se escrever esse código, ou seja, que há um jeito próprio do Kotlin. Se deixarmos o curso em cima do if que foi marcado e apertar "alt + enter" aparecerá a opção de substituir o if pelo when, e ficará assim:

when { 
	saldo > 0.0 -> { 
		println("Saldo é positivo") 
	} 
	saldo == 0.0 -> { 
		println("Saldo é neutro") 
	} else -> { 
		println("Saldo é negativo") 
	} 
}

Como em cada condicional só fazemos uma ação, somente um print, poderiamos deixar esse código assim:

when { 
	saldo > 0.0 -> println("Saldo é positivo") 
	saldo == 0.0 -> println("Saldo é neutro") 
	else -> println("Saldo é negativo") 
}

Aqui podemos usar o break e continue igual no Java

⦁	Estrutura de repetição. No Kotlin temos: for, while, do while.

⦁	For:

for(item in collection) println(item)

Com o for apresentado vamos poder percorrer uma collection

for(item: int in ints){

}

Com o for apresentado vamos poder percorrer uma collection

for(i in 1..5){ 
	println(i) 
}

Com esse for o i apontará para todos os elemtos de 1 até 5, longo será "printado" na tela 1,2,3,4,5

for(i in 1..5 step 2){ 
	println(i) 
}

Com esse for o i apontará para todos os elemtos de 1 até 5, só que irá pular de 2 em 2. Ele começara no 1 e depois vai para o 3 (1+2 =3), logo será "printado": 1,3,5

for(i in 1 downTo 5){ 
	println(i) 
}

Com esse for o i apontará para todos os elemtos de 5 até 1, ou seja, estamos na ordem inversa. Podemos usar o step nele também.

⦁	While:

var i = 0 
while (i < 5) { 
	println(i) 
	i++ 
}

Igual o do Java. Criamos uma variável fora do laço e depois fazemos uma condicional, o laço se repetira enquanto a condicional for verdadeira. Dentro do laço temos que manipular a condicional, caso contrario vamos ficar no loop infinto. A seguir outra maneira de implementar o while (Do While):

var t=0 
do{ 
	println("Do while $t") 
	t++ 
}while(t<5)


⦁	O código procedural dificulta o entendimento do código, dificulta a manutenção, pois com ele não podemos representar as coisas da vida real dentro do código. Vamos usar a Orientação a Objetos, com ela vamos organizar melhor o codigo, teremos representações mais parecidas com a vida real, teremos mais faclidade em manter o código!



